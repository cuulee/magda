image: data61/magda-builder:0.0.38-0

variables:
  CI: "true"
  SBT_OPTS: -Dsbt.global.base=sbt-cache/sbtboot -Dsbt.boot.directory=sbt-cache/boot -Dsbt.ivy.home=sbt-cache/ivy
  DOCKER_DRIVER: overlay2

stages:
  - prebuild
  - build
  - test
  - dockerize
  - preview
  - deploy-dev
  - deploy-prod

cache:
  key: $CI_JOB_NAME
  paths:
  - "sbt-cache/ivy/cache"
  - "sbt-cache/boot"
  - "sbt-cache/sbtboot"
  - "sbt-cache/target"
  - "node_modules/"
  - "*/node_modules"
  - target
  - "*/target"

before_script:
- lerna bootstrap --scope=@magda/scripts

include:
- /magda-authorization-api/.gitlab-ci.yml
- /magda-typescript-common/.gitlab-ci.yml

preview:
  stage: preview
  cache: 
    paths: []
  image: 
    name: dtzar/helm-kubectl
  before_script: []
  script:
  - echo "$KUBECTL_CONFIG" > kubectlconfig.yaml
  - export KUBECONFIG=kubectlconfig.yaml
  - kubectl create secret docker-registry regcred --docker-server=registry.gitlab.com --docker-username=gitlab-ci-token --docker-password=$CI_JOB_TOKEN --docker-email=alex.gilleran@data61.csiro.au --namespace $CI_COMMIT_REF_SLUG --dry-run -o json | kubectl apply --namespace $CI_COMMIT_REF_SLUG -f -
  - helm upgrade $CI_COMMIT_REF_SLUG deploy/helm/magda --install --namespace $CI_COMMIT_REF_SLUG -f deploy/helm/preview.yml --set global.image.repository=registry.gitlab.com/magda-data/magda/data61,global.image.tag=$CI_COMMIT_SHA,tags.all=false,tags.authorization-api=true
#  - 


# build-nodejs:
#   stage: build
#   script:
#     - lerna bootstrap --scope=@magda/scripts 
#     - npm run node-ci -- --command=build
#   artifacts:
#     paths:
#     - "*/dist"
#     expire_in: 30 minutes

# # This doesn't actually have a dependency on building so just do it as part of build.
# test-nodejs:
#   stage: build
#   script:
#     - lerna bootstrap --scope=@magda/scripts 
#     - npm run node-ci -- --command=test

# build-scala:
#   stage: build
#   script:
#     - sbt compile
#   artifacts:
#     paths:
#     - "*/target"
#     - "target"
#     - "sbt-cache/ivy/cache"
#     - "sbt-cache/boot"
#     - "sbt-cache/sbtboot"
#     - "sbt-cache/target"
#     expire_in: 30 minutes

# test-registry:
#   stage: test
#   dependencies:
#   - build-scala
#   cache:
#     paths: []
#   services:
#     - postgres:9.6
#   variables:
#     POSTGRES_URL: "jdbc:postgresql://postgres/postgres"
#     POSTGRES_DB: postgres
#     POSTGRES_USER: postgres
#     POSTGRES_PASSWORD: ""
#   script:
#     - sbt registryApi/test

# test-search:
#   stage: test
#   dependencies:
#   - build-scala
#   cache:
#     paths: []
#   services:
#     - postgres:9.6
#   variables:
#     # 2.5gb heap
#     # unload classes we don't need
#     # aim for < 1000ms gc pauses (largely ignored)
#     # use the next-gen collector that every blog on the internet says not to use because we know better than them
#     # use < 25% of time for GC
#     # put the ivy cache in the workspace where gitlab can cache it
#     SBT_OPTS: >
#       -Xms2500M -Xmx2500M
#       -XX:+CMSClassUnloadingEnabled
#       -XX:MaxGCPauseMillis=1000
#       -XX:+UseG1GC
#       -XX:GCTimeRatio=3
#       -Dsbt.global.base=sbt-cache/sbtboot -Dsbt.boot.directory=sbt-cache/boot -Dsbt.ivy.home=sbt-cache/ivy
#   script:
#     - sbt searchApi/test indexer/test intTest/test

# build-ui:
#   stage: build
#   script:
#     - lerna --scope @magda/web-client bootstrap
#     - ./node_modules/.bin/eslint magda-web-client/src/
#     - lerna --scope @magda/web-client run build
#   artifacts:
#     paths:
#     - magda-web-client/build
#     expire_in: 30 minutes

# # test-ui:
# #   stage: test
# #   dependencies:
# #   - build-ui
# #   cache:
# #     key: build-ui-1
# #     policy: pull
# #     paths:
# #     - "node_modules/"
# #     - "*/node_modules"
# #   stage: test
# #   script:
# #     - lerna --scope @magda/web-client bootstrap
# #     - lerna --scope @magda/web-client run test

# build-preview-map:
#   stage: build
#   script:
#     - lerna --scope @magda/preview-map bootstrap
#     - lerna --scope @magda/preview-map run build
#   artifacts:
#     paths:
#     - magda-preview-map/build
#     expire_in: 30 minutes

# build-docker:
#   stage: build-docker
#   script:
#     - lerna bootstrap
#     - "lerna run docker-build-prod --include-filtered-dependencies -- -- --repository=registry.gitlab.com/magda-data/magda --version=$CI_COMMIT_SHA"